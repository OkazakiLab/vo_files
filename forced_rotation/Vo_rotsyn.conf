#############################################################
## JOB DESCRIPTION                                         ##
#############################################################

# Min. and Eq. of Vo
# embedded in POPC membrane, ions and water.

#############################################################
## ADJUSTABLE PARAMETERS                                   ##
#############################################################

structure          ../common/Vo_E63dpp.psf
coordinates        ../common/Vo_E63dpp.pdb
outputName         Vo_E63dpp_rotsyn

set temperature    310.0

# Continuing a job from the restart files
if {1} {
set inputname      ../stage1_mineq3/Vo_E63dpp_mineq3
binCoordinates     $inputname.restart.coor
binVelocities      $inputname.restart.vel  ;# remove the "temperature" entry if you use this!
extendedSystem	   $inputname.restart.xsc
} 

firsttimestep      0


#############################################################
## SIMULATION PARAMETERS                                   ##
#############################################################

## Input
#paraTypeCharmm	    on
#parameters          ../Common/par_all36_prot.prm
#parameters          ../Common/par_all36_lipid.prm
#parameters          ../Common/toppar_water_ions.str

# Force-Field Parameters
paraTypeCharmm          on;                 # We're using charmm type parameter file(s)
                                            # multiple definitions may be used but only one file per definition
parameters              ../common/toppar/par_all36m_prot.prm
parameters              ../common/toppar/par_all36_na.prm
parameters              ../common/toppar/par_all36_carb.prm
parameters              ../common/toppar/par_all36_lipid.prm
parameters              ../common/toppar/par_all36_cgenff.prm
parameters              ../common/toppar/par_interface.prm
parameters              ../common/toppar/toppar_all36_moreions.str
parameters              ../common/toppar/toppar_all36_nano_lig.str
parameters              ../common/toppar/toppar_all36_nano_lig_patch.str
parameters              ../common/toppar/toppar_all36_synthetic_polymer.str
parameters              ../common/toppar/toppar_all36_synthetic_polymer_patch.str
parameters              ../common/toppar/toppar_all36_polymer_solvent.str
parameters              ../common/toppar/toppar_water_ions.str
parameters              ../common/toppar/toppar_dum_noble_gases.str
parameters              ../common/toppar/toppar_ions_won.str
parameters              ../common/toppar/cam.str
parameters              ../common/toppar/toppar_all36_prot_arg0.str
parameters              ../common/toppar/toppar_all36_prot_c36m_d_aminoacids.str
parameters              ../common/toppar/toppar_all36_prot_fluoro_alkanes.str
parameters              ../common/toppar/toppar_all36_prot_heme.str
parameters              ../common/toppar/toppar_all36_prot_na_combined.str
parameters              ../common/toppar/toppar_all36_prot_retinol.str
parameters              ../common/toppar/toppar_all36_prot_model.str
parameters              ../common/toppar/toppar_all36_prot_modify_res.str
parameters              ../common/toppar/toppar_all36_na_nad_ppi.str
parameters              ../common/toppar/toppar_all36_na_rna_modified.str
parameters              ../common/toppar/toppar_all36_lipid_sphingo.str
parameters              ../common/toppar/toppar_all36_lipid_archaeal.str
parameters              ../common/toppar/toppar_all36_lipid_bacterial.str
parameters              ../common/toppar/toppar_all36_lipid_cardiolipin.str
parameters              ../common/toppar/toppar_all36_lipid_cholesterol.str
parameters              ../common/toppar/toppar_all36_lipid_dag.str
parameters              ../common/toppar/toppar_all36_lipid_inositol.str
parameters              ../common/toppar/toppar_all36_lipid_lnp.str
parameters              ../common/toppar/toppar_all36_lipid_lps.str
parameters              ../common/toppar/toppar_all36_lipid_mycobacterial.str
parameters              ../common/toppar/toppar_all36_lipid_miscellaneous.str
parameters              ../common/toppar/toppar_all36_lipid_model.str
parameters              ../common/toppar/toppar_all36_lipid_prot.str
parameters              ../common/toppar/toppar_all36_lipid_tag.str
parameters              ../common/toppar/toppar_all36_lipid_yeast.str
parameters              ../common/toppar/toppar_all36_lipid_hmmm.str
parameters              ../common/toppar/toppar_all36_lipid_detergent.str
parameters              ../common/toppar/toppar_all36_lipid_ether.str
parameters              ../common/toppar/toppar_all36_carb_glycolipid.str
parameters              ../common/toppar/toppar_all36_carb_glycopeptide.str
parameters              ../common/toppar/toppar_all36_carb_imlab.str
parameters              ../common/toppar/toppar_all36_label_spin.str
parameters              ../common/toppar/toppar_all36_label_fluorophore.str

# NOTE: Do not set the initial velocity temperature if you 
# have also specified a .vel restart file!
# temperature         $temperature
 

# Periodic Boundary Conditions
# NOTE: Do not set the periodic cell basis if you have also 
# specified an .xsc restart file!
if {0} { 
cellBasisVector1   160.1    0.   0.
cellBasisVector2     0.  160.1   0.
cellBasisVector3     0.    0. 160.2
cellOrigin          0.0   0.0  0.0
}
wrapWater           on
wrapAll             on


# Nonbonded Parameters
exclude             scaled1-4
1-4scaling          1.0
cutoff              12.
switching           on
switchdist          10.
pairlistdist        13.5


# Integrator Parameters
timestep            2.0  ;# 2fs/step
rigidBonds          all  ;# needed for 2fs steps
nonbondedFreq       1
fullElectFrequency  2  
stepspercycle       20


#PME (for full-system periodic electrostatics)
if {1} {
PME                 yes
PMEGridSpacing      1.0
#PMEGridSizeX       80
#PMEGridSizeY       80
#PMEGridSizeZ       90
}


# Constant Temperature Control
langevin            on    ;# do langevin dynamics
langevinDamping     1.0     ;# damping coefficient (gamma) of 1/ps
langevinTemp        $temperature

# Constant Pressure Control (variable volume)
if {1} {
useGroupPressure      yes ;# needed for 2fs steps
useFlexibleCell       yes  ;# no for water box, yes for membrane
useConstantRatio      yes  ;# keep ratio of x and y 
useConstantArea       no  ;# do not use this w/ CHARMM36

langevinPiston        on
langevinPistonTarget  1.01325 ;#  in bar -> 1 atm
langevinPistonPeriod  200.
langevinPistonDecay   50.
langevinPistonTemp    $temperature
}


restartfreq      10000     ;# 10000steps = every 20ps
dcdfreq          10000
xstFreq          10000
outputEnergies     100
outputPressure     100


# Fixed Atoms Constraint (set PDB beta-column to 1)
if {0} {
fixedAtoms          on
fixedAtomsFile      ../common/fix_mineq1.pdb
fixedAtomsCol       B
fixedAtomsForces    on
}

# Harmonic restraint parameters
if {1} {
constraints on
consexp 2
consref ../common/fix_asub.pdb
conskfile ../common/fix_asub.pdb
conskcol B
}

#############################################################
## EXTRA PARAMETERS                                        ##
#############################################################

# Put here any custom parameters that are specific to 
# this job (e.g., SMD, TclForces, etc...)

tclForces            on
tclForcesScript {

  # The ID of force-applied groupes
  set alist4 {}
  foreach sid {PROB PROC PROD PROE PROF PROG PROH PROI PROJ PROK PROL PROM} {
    for {set rid 10} {$rid <= 80} {incr rid} { 
      set aid [atomid $sid $rid CA]
      addatom $aid
      lappend alist4 $aid
    }
  }

  # Read initial coords of gamma
  set xyz0 {}
  set f [open ../common/Vo_cring_CA.data]
  while {[gets $f line] >= 0} {
    set elements [regexp -all -inline {\S+} $line]
    set temp [list [lindex $elements 0] [lindex $elements 1] [lindex $elements 2]]
    lappend xyz0 $temp
  }
  close $f

  # Set parameters
  set k 100000.0  
  set PI 3.14159
  set ifile [open avangl.dat w]
  set savets 500
  puts $ifile "#     time| tgt angl|  tgt cos|  ave cos|  tgt sin|  ave sin"
  flush $ifile

  # Initial setting
  # rotationa axis
  set v {0.0 0.0 -1.0}
  # calculate initial CM
  set nca [llength $alist4]
  set cmsum {0.0 0.0 0.0}
  for {set ica 0} {$ica < $nca} {incr ica} {
      set temp [lindex $xyz0 $ica]
      set cmsum [vecadd $cmsum $temp]
  }
  set pre [expr 1.0/$nca]
  set rcm0 [vecscale $pre $cmsum]
  # calculate initial ri - rcm
  set ricm {}
  for {set ica 0} {$ica < $nca} {incr ica} {
      set temp [lindex $xyz0 $ica]
      set temp [vecsub $temp $rcm0]
      lappend ricm $temp
  }
  # calculate initial si
  set si0 {}
  set vx [lindex $v 0]
  set vy [lindex $v 1]
  set vz [lindex $v 2]
  for {set ica 0} {$ica < $nca} {incr ica} {
      set xyz [lindex $ricm $ica]
      set x [lindex $xyz 0]
      set y [lindex $xyz 1]
      set z [lindex $xyz 2]
      set prev [expr $x*$vx+$y*$vy+$z*$vz]
      set temp [vecscale $prev $v]
      set xyz1 [vecsub $xyz $temp]
      set r0 [veclength $xyz1]
      set pre [expr 1.0/$r0]
      set xyz1 [vecscale $pre $xyz1]
      lappend si0 $xyz1
  }

  # for speedup
  set forcesRecalcFreq 10
  set forcecount $forcesRecalcFreq  
  # initial force
  set forces2 {}
  foreach ica $alist4 {
      lappend forces2 {0.0 0.0 0.0}
  }


  proc calcforces {} {
  
    global k PI ifile savets
    global alist4
    global v nca si0
    global forcesRecalcFreq forcecount forces2

    set ts [getstep]

    # preparing for recalculation of forces in next time step
    if { $forcecount == [expr $forcesRecalcFreq - 1] } {
       foreach ica $alist4 {
       	   addatom $ica	   
       }
    }

    # recalculate forces
    if { $forcecount == $forcesRecalcFreq } {
       loadcoords p
       
       # Calculate target cos, sin
       set phit [expr (1.0*$PI/180.0)*$ts/1000000]
       set cost [expr cos($phit)]
       set sint [expr sin($phit)]

       # Calculate CM
       set cmsum {0.0 0.0 0.0}
       foreach ica $alist4 {
           set cmsum [vecadd $cmsum $p($ica)]
       }
       set pre [expr 1.0/$nca]
       set rcm [vecscale $pre $cmsum]
      
       # Calculate ri - rcm
       set ricm {}
       foreach ica $alist4 {
           set temp [vecsub $p($ica) $rcm]
	   lappend ricm $temp
       }

       # Calculate si, Sri, Sricosi, Srisini, Ssi0, Ssi, Svxsi0
       set vx [lindex $v 0]
       set vy [lindex $v 1]
       set vz [lindex $v 2]
       set si {}
       set Sri {0.0}
       set Sricosi {0.0}
       set Srisini {0.0}
       set Ssi0 {0.0 0.0 0.0}
       set Ssi {0.0 0.0 0.0}
       set Svxsi0 {0.0 0.0 0.0}
       for {set ica 0} {$ica < $nca} {incr ica} {
    	   set xyz [lindex $ricm $ica]
	   set x [lindex $xyz 0]
	   set y [lindex $xyz 1]
	   set z [lindex $xyz 2]
	   set prev [expr $x*$vx+$y*$vy+$z*$vz]
	   set temp [vecscale $prev $v]
      	   set xyz1 [vecsub $xyz $temp]
	   set r [veclength $xyz1]
      	   set pre [expr 1.0/$r]
      	   set xyz1 [vecscale $pre $xyz1]
      	   lappend si $xyz1
	   set Sri [expr $Sri+$r]

	   set xyz0 [lindex $si0 $ica]
	   set x0 [lindex $xyz0 0]
	   set y0 [lindex $xyz0 1]
	   set z0 [lindex $xyz0 2]
	   set x1 [lindex $xyz1 0]
	   set y1 [lindex $xyz1 1]
	   set z1 [lindex $xyz1 2]
	   set temp [expr $x0*$x1+$y0*$y1+$z0*$z1]	   
	   set temp [expr $r*$temp]
	   set Sricosi [expr $Sricosi+$temp]
	
	   set x2 [expr $vy*$z0-$vz*$y0]
	   set y2 [expr $vz*$x0-$vx*$z0]
	   set z2 [expr $vx*$y0-$vy*$x0]
	   set xyz2 [list $x2 $y2 $z2]
	   set temp [expr $x2*$x1+$y2*$y1+$z2*$z1]	   
	   set temp [expr $r*$temp]
	   set Srisini [expr $Srisini+$temp]

	   set Ssi0 [vecadd $Ssi0 $xyz0]

	   set Ssi [vecadd $Ssi $xyz1]
	
	   set Svxsi0 [vecadd $Svxsi0 $xyz2]
       }    
    
       # The force to be applied
       set forces2 {}
       for {set ica 0} {$ica < $nca} {incr ica} {
	   # force from cos term
	   set part1 [expr -$k*(($Sricosi/$Sri)-$cost)/($Sri*$Sri)]
	   set pre [expr -1.0/$nca]
	   set vec1 [vecscale $pre $Ssi0]
	   set xyz0 [lindex $si0 $ica]
	   set vec2 $xyz0
	   set vec3 [vecscale $pre $Ssi]
	   set vec4 [lindex $si $ica]
	   set temp1 [vecadd $vec1 $vec2]
	   set temp1 [vecscale $Sri $temp1]
	   set temp2 [vecadd $vec3 $vec4]
	   set temp2 [vecscale $Sricosi $temp2]
	   set part2 [vecsub $temp1 $temp2]
	   set forcec [vecscale $part1 $part2]
	   # force from sin term
	   set part1 [expr -$k*(($Srisini/$Sri)-$sint)/($Sri*$Sri)]
	   set vec1 [vecscale $pre $Svxsi0]
	   set x0 [lindex $xyz0 0]
	   set y0 [lindex $xyz0 1]
	   set z0 [lindex $xyz0 2]
	   set x2 [expr $vy*$z0-$vz*$y0]
	   set y2 [expr $vz*$x0-$vx*$z0]
	   set z2 [expr $vx*$y0-$vy*$x0]
	   set vec2 [list $x2 $y2 $z2]
	   set temp1 [vecadd $vec1 $vec2]
	   set temp1 [vecscale $Sri $temp1]
	   set temp2 [vecadd $vec3 $vec4]
	   set temp2 [vecscale $Srisini $temp2]
	   set part2 [vecsub $temp1 $temp2]
	   set forces [vecscale $part1 $part2]
       	   # force to be applied
	   set force1 [vecadd $forcec $forces]
	   lappend forces2 $force1
       }  
       set forcecount 0
       clearconfig
    }
    incr forcecount
  
    # apply force 
    foreach ica $alist4 forcea $forces2 {   	
    	#puts $ifile "force: $ica $forcea"
	#flush $ifile
        addforce $ica $forcea
    }

    # OUTPUT
    set n [expr $ts/$savets]
    if {$ts == $n*$savets} {
	set phitdeg [expr $phit*180/$PI]
        set cosav [expr $Sricosi/$Sri]
        set sinav [expr $Srisini/$Sri]
	puts $ifile [format "%10d%10.3f%10.5f%10.5f%10.5f%10.5f" $ts $phitdeg $cost $cosav $sint $sinav]
    	flush $ifile
    }

  }
}


#############################################################
## EXECUTION SCRIPT                                        ##
#############################################################

# Minimization
if {0} {
minimize            5000
reinitvels          $temperature
}

#run 25000000 ;# 50 ns
run 30000000 ;# 60 ns
